* Emacs config (or something)
  Hello, below is my sick :skateboard: Emacs config. #devops.

* basic settings + `straight` package manager
#+BEGIN_SRC emacs-lisp
  ;; + inspo for settings:
  ;; https://github.com/joedicastro/dotfiles/tree/master/emacs/.emacs.d
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)
  (tool-bar-mode -1)
  (blink-cursor-mode -1)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;;A cute little clock
  (display-time-mode 1)

  ;; Disable auto-backups & lock files
  (setq create-lockfiles nil)
  (setq make-backup-files nil)
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
  ;; Space indents
  (setq-default indent-tabs-mode  nil
                default-tab-width 4
                c-basic-offset 4)

  ;; show matching prens
  (setq show-paren-delay 0)
  (show-paren-mode t)


  ;; UTF-8 everywhere!
  (set-terminal-coding-system  'utf-8)
  (set-keyboard-coding-system  'utf-8)
  (set-language-environment    'utf-8)
  (set-selection-coding-system 'utf-8)
  (setq locale-coding-system   'utf-8)
  (prefer-coding-system        'utf-8)
  (set-input-method nil)

  ;; Remove trailing whitespace + some other housekeeping things
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t)




    ;; Bootstrap code for straight
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq Straight-use-package-by-default t)

  ;; Package repos
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "http://melpa.org/packages/")))


  (require 'use-package)
  (package-initialize)
  (package-refresh-contents)
  (use-package quelpa)
  (use-package quelpa-use-package)
  ;; Actually get “package” to work.

  (setq use-package-always-ensure t)

  ;; Pakage update stuff!
  (use-package auto-package-update
    :defer 10
    :config
    ;; Delete residual old versions
    (setq auto-package-update-delete-old-versions t)
    ;; Do not bother me when updates have taken place.
    (setq auto-package-update-hide-results t)
    ;; Update installed packages at startup if there is an update pending.
    (auto-package-update-maybe))
#+END_SRC

* navigation
#+BEGIN_SRC emacs-lisp
  ;; This package reminds me what keys do what
  (use-package which-key
    :diminish
    :defer 1
    :config (which-key-mode)
            (which-key-setup-side-window-bottom)
            (setq which-key-idle-delay 0.05))


  ;; cool git graphics package!
  (use-package magit
               :config (global-set-key (kbd "C-x g") 'magit-status))

  ;; Filtering/sorting candidates -> selectrum + perscient
  (straight-use-package 'selectrum)
  (straight-use-package 'prescient)
  (straight-use-package 'ivy-prescient)
  (straight-use-package 'company-prescient)
  (straight-use-package 'selectrum-prescient)
  (selectrum-mode +1)
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1)

  ;; Window switching
  (straight-use-package 'ace-window)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  (global-set-key (kbd "C-o") 'ace-window)




  ;; Undo Tree
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))
  (global-undo-tree-mode 1)
  (setq undo-tree-auto-save-history t)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  ;; Things to clean the ~undo-tree~ fucked files^


  ;; "Dog Ears": history tab for buffers
  (use-package dogears
    :quelpa (dogears :fetcher github :repo "alphapapa/dogears.el")

    ;; These bindings are optional, of course:
    :bind (:map global-map
                ("M-g d" . dogears-go)
                ("M-g M-b" . dogears-back)
                ("M-g M-f" . dogears-forward)
                ("M-g M-d" . dogears-list)
                ("M-g M-D" . dogears-sidebar)))
#+END_SRC

* Programming
#+BEGIN_SRC emacs-lisp
  ;; TODO: actually come back and add more to this
  (straight-use-package 'lsp-mode)
  (straight-use-package 'flycheck)
#+END_SRC
** Functional languages + theorem provers
   #+BEGIN_SRC emacs-lisp
     (straight-use-package 'sml-mode)

     ;; yanked from here
     ;; https://www.cs.princeton.edu/courses/archive/fall04/cos441/web/resources/.emacs

     ;; Sml stuff
     (autoload 'sml-mode "sml-mode" "Major mode for editing SML." t)
     (setq auto-mode-alist
           (append '(("\\.sml$" . sml-mode)
                     ("\\.sig$" . sml-mode)
                     ("\\.fun$" . sml-mode))
                     auto-mode-alist))

     (add-hook 'sml-mode-hook 'turn-on-font-lock)
     (add-hook 'sml-load-hook '(lambda () (require 'sml-font)))

     (setq exec-path (cons "/usr/local/smlnj/bin/" exec-path))
     (setq sml-program-name "sml")

     ;; my favorite sml style
     (setq sml-indent-level       2)
     (setq sml-pipe-indent        -2)
     (setq sml-case-indent        t)
     (setq sml-nested-if-indent   t)
     (setq sml-type-of-indent     nil)
     (setq sml-electric-semi-mode nil)


     ;; Lean stuff
     (straight-use-package 'lean-mode)
     (straight-use-package 'unicode-fonts)
     (unicode-fonts-setup)


     ;; Agda things
     (load-file (let ((coding-system-for-read 'utf-8))
                     (shell-command-to-string "agda-mode locate")))

   #+END_SRC

** org-mode + writing
   #+BEGIN_SRC emacs-lisp
     ;; LaTeX
     (straight-use-package 'auctex)
     (straight-use-package 'cdlatex)

     ;; some config settings we're yanked from
     ;; https://www.vanormondt.net/~peter/blog
     (setq TeX-PDF-mode t)
     (setq-default TeX-master)
     (add-hook `TeX-mode-hook (lambda ()
                                (TeX-fold-mode 1)))

     ;; Spellchecking in LaTeX!
     (add-hook `LaTeX-mode-hook `flyspell-mode)
     (add-hook `TeX-mode-hook `flyspell-mode)
     (add-hook `bibtex-mode-hook `flyspell-mode)


     ;;Org
     (use-package org
       :config
       (unless (functionp 'org-link-make-string)
         (fset 'org-link-make-string 'org-make-link-string))
       )

     (setq org-modules '(org-habit
                         org-mouse
                         org-protocol
                         org-annotate-file
                         org-eval
                         org-expiry
                         org-interactive-query
                         org-collector
                         org-panel
                         org-screen
                         org-toc))
     (eval-after-load 'org
       '(org-load-modules-maybe t))
     ;; Prepare stuff for org-export-backends
     (setq org-export-backends '(org latex icalendar html ascii))

     ;;Yanked from orgmode.org
     (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
#+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'custom-theme-load-path
                 (file-name-as-directory "~/.emacs.d/themes/"))
    (add-to-list 'custom-theme-load-path
                 (file-name-as-directory "~/.emacs.d/moe-emacs.d/"))
    (add-to-list 'load-path "~/.emacs.d/moe-theme.el/")

    (straight-use-package `powerline)
    (powerline-default-theme)

    (require 'moe-theme)
    (load-theme 'moe-dark t)
    (setq moe-theme-highlight-buffer-id t)
    (setq moe-theme-mode-line-color 'purple)

    ;; paren highlighting w/moe-theme
    (show-paren-mode t)
    (setq show-paren-style 'expression)

    (set-face-attribute 'default nil
                        :family "Iosevka SS09"
                        :height 130)
  #+END_SRC
